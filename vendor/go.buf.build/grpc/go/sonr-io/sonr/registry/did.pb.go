// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: registry/did.proto

package registry

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NetworkType is the type of network the DID is on.
type NetworkType int32

const (
	// Unspecified is the default value. Gets converted to "did:sonr:".
	NetworkType_NETWORK_TYPE_UNSPECIFIED NetworkType = 0
	// Mainnet is the main network. It prefix is "did:sonr:" or "did:sonr:mainnet:".
	NetworkType_NETWORK_TYPE_MAINNET NetworkType = 1
	// Testnet is the deployed test network. It's prefix is "did:sonr:testnet:".
	NetworkType_NETWORK_TYPE_TESTNET NetworkType = 2
	// Devnet is the localhost test network. It's prefix is "did:sonr:devnet:".
	NetworkType_NETWORK_TYPE_DEVNET NetworkType = 3
)

// Enum value maps for NetworkType.
var (
	NetworkType_name = map[int32]string{
		0: "NETWORK_TYPE_UNSPECIFIED",
		1: "NETWORK_TYPE_MAINNET",
		2: "NETWORK_TYPE_TESTNET",
		3: "NETWORK_TYPE_DEVNET",
	}
	NetworkType_value = map[string]int32{
		"NETWORK_TYPE_UNSPECIFIED": 0,
		"NETWORK_TYPE_MAINNET":     1,
		"NETWORK_TYPE_TESTNET":     2,
		"NETWORK_TYPE_DEVNET":      3,
	}
)

func (x NetworkType) Enum() *NetworkType {
	p := new(NetworkType)
	*p = x
	return p
}

func (x NetworkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkType) Descriptor() protoreflect.EnumDescriptor {
	return file_registry_did_proto_enumTypes[0].Descriptor()
}

func (NetworkType) Type() protoreflect.EnumType {
	return &file_registry_did_proto_enumTypes[0]
}

func (x NetworkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkType.Descriptor instead.
func (NetworkType) EnumDescriptor() ([]byte, []int) {
	return file_registry_did_proto_rawDescGZIP(), []int{0}
}

// ServiceProtocol are core modules that can be installed on custom services on the Sonr network.
type ServiceProtocol int32

const (
	// SERVICE_PROTOCOL_UNSPECIFIED is the default value.
	ServiceProtocol_SERVICE_PROTOCOL_UNSPECIFIED ServiceProtocol = 0
	// SERVICE_PROTOCOL_BUCKETS is the module that provides the ability to store and retrieve data.
	ServiceProtocol_SERVICE_PROTOCOL_BUCKETS ServiceProtocol = 1
	// SERVICE_PROTOCOL_CHANNEL is the module that provides the ability to communicate with other services.
	ServiceProtocol_SERVICE_PROTOCOL_CHANNEL ServiceProtocol = 2
	// SERVICE_PROTOCOL_OBJECTS is the module that provides the ability to create new schemas for data on the network.
	ServiceProtocol_SERVICE_PROTOCOL_OBJECTS ServiceProtocol = 3
	// SERVICE_PROTOCOL_FUNCTIONS is the module that provides the ability to create new functions for data on the network.
	ServiceProtocol_SERVICE_PROTOCOL_FUNCTIONS ServiceProtocol = 4
)

// Enum value maps for ServiceProtocol.
var (
	ServiceProtocol_name = map[int32]string{
		0: "SERVICE_PROTOCOL_UNSPECIFIED",
		1: "SERVICE_PROTOCOL_BUCKETS",
		2: "SERVICE_PROTOCOL_CHANNEL",
		3: "SERVICE_PROTOCOL_OBJECTS",
		4: "SERVICE_PROTOCOL_FUNCTIONS",
	}
	ServiceProtocol_value = map[string]int32{
		"SERVICE_PROTOCOL_UNSPECIFIED": 0,
		"SERVICE_PROTOCOL_BUCKETS":     1,
		"SERVICE_PROTOCOL_CHANNEL":     2,
		"SERVICE_PROTOCOL_OBJECTS":     3,
		"SERVICE_PROTOCOL_FUNCTIONS":   4,
	}
)

func (x ServiceProtocol) Enum() *ServiceProtocol {
	p := new(ServiceProtocol)
	*p = x
	return p
}

func (x ServiceProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_registry_did_proto_enumTypes[1].Descriptor()
}

func (ServiceProtocol) Type() protoreflect.EnumType {
	return &file_registry_did_proto_enumTypes[1]
}

func (x ServiceProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceProtocol.Descriptor instead.
func (ServiceProtocol) EnumDescriptor() ([]byte, []int) {
	return file_registry_did_proto_rawDescGZIP(), []int{1}
}

// ServiceType is the type of service that is being registered.
type ServiceType int32

const (
	// SERVICE_TYPE_UNSPECIFIED is the default value.
	ServiceType_SERVICE_TYPE_UNSPECIFIED ServiceType = 0
	// SERVICE_TYPE_APPLICATION is the type of service that is a DApp.
	ServiceType_SERVICE_TYPE_DID_COMM_MESSAGING ServiceType = 1
	// SERVICE_TYPE_SERVICE is the type of service that is a service.
	ServiceType_SERVICE_TYPE_LINKED_DOMAINS ServiceType = 2
	// SERVICE_TYPE_SONR is the type of service that is a DApp.
	ServiceType_SERVICE_TYPE_SONR ServiceType = 3
)

// Enum value maps for ServiceType.
var (
	ServiceType_name = map[int32]string{
		0: "SERVICE_TYPE_UNSPECIFIED",
		1: "SERVICE_TYPE_DID_COMM_MESSAGING",
		2: "SERVICE_TYPE_LINKED_DOMAINS",
		3: "SERVICE_TYPE_SONR",
	}
	ServiceType_value = map[string]int32{
		"SERVICE_TYPE_UNSPECIFIED":        0,
		"SERVICE_TYPE_DID_COMM_MESSAGING": 1,
		"SERVICE_TYPE_LINKED_DOMAINS":     2,
		"SERVICE_TYPE_SONR":               3,
	}
)

func (x ServiceType) Enum() *ServiceType {
	p := new(ServiceType)
	*p = x
	return p
}

func (x ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_registry_did_proto_enumTypes[2].Descriptor()
}

func (ServiceType) Type() protoreflect.EnumType {
	return &file_registry_did_proto_enumTypes[2]
}

func (x ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceType.Descriptor instead.
func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_registry_did_proto_rawDescGZIP(), []int{2}
}

type VerificationMethod_Type int32

const (
	// TYPE_UNSPECIFIED is the default value.
	VerificationMethod_TYPE_UNSPECIFIED VerificationMethod_Type = 0
	// TYPE_ECDSA_SECP256K1 represents the Ed25519VerificationKey2018 key type.
	VerificationMethod_TYPE_ECDSA_SECP256K1 VerificationMethod_Type = 1
	// TYPE_X25519 represents the X25519KeyAgreementKey2019 key type.
	VerificationMethod_TYPE_X25519 VerificationMethod_Type = 2
	// TYPE_ED25519 represents the Ed25519VerificationKey2018 key type.
	VerificationMethod_TYPE_ED25519 VerificationMethod_Type = 3
	// TYPE_BLS_12381_G1 represents the Bls12381G1Key2020 key type
	VerificationMethod_TYPE_BLS_12381_G1 VerificationMethod_Type = 4
	// TYPE_BLS_12381_G2 represents the Bls12381G2Key2020 key type
	VerificationMethod_TYPE_BLS_12381_G2 VerificationMethod_Type = 5
	// TYPE_RSA represents the RsaVerificationKey2018 key type.
	VerificationMethod_TYPE_RSA VerificationMethod_Type = 6
	// TYPE_VERIFIABLE_CONDITION represents the VerifiableCondition2021 key type.
	VerificationMethod_TYPE_VERIFIABLE_CONDITION VerificationMethod_Type = 7
)

// Enum value maps for VerificationMethod_Type.
var (
	VerificationMethod_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_ECDSA_SECP256K1",
		2: "TYPE_X25519",
		3: "TYPE_ED25519",
		4: "TYPE_BLS_12381_G1",
		5: "TYPE_BLS_12381_G2",
		6: "TYPE_RSA",
		7: "TYPE_VERIFIABLE_CONDITION",
	}
	VerificationMethod_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":          0,
		"TYPE_ECDSA_SECP256K1":      1,
		"TYPE_X25519":               2,
		"TYPE_ED25519":              3,
		"TYPE_BLS_12381_G1":         4,
		"TYPE_BLS_12381_G2":         5,
		"TYPE_RSA":                  6,
		"TYPE_VERIFIABLE_CONDITION": 7,
	}
)

func (x VerificationMethod_Type) Enum() *VerificationMethod_Type {
	p := new(VerificationMethod_Type)
	*p = x
	return p
}

func (x VerificationMethod_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerificationMethod_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_registry_did_proto_enumTypes[3].Descriptor()
}

func (VerificationMethod_Type) Type() protoreflect.EnumType {
	return &file_registry_did_proto_enumTypes[3]
}

func (x VerificationMethod_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VerificationMethod_Type.Descriptor instead.
func (VerificationMethod_Type) EnumDescriptor() ([]byte, []int) {
	return file_registry_did_proto_rawDescGZIP(), []int{4, 0}
}

// Did represents a string that has been parsed and validated as a DID. The parts are stored
// in the individual fields.
type Did struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Method is the method used to create the DID. For the Sonr network it is "sonr".
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// Network is the network the DID is on. For testnet it is "testnet". i.e "did:sonr:testnet:".
	Network string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	// id is the trailing identifier after the network. i.e. "did:sonr:testnet:abc123"
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Paths is a list of paths that the DID is valid for. This is used to identify the Service.
	Paths []string `protobuf:"bytes,4,rep,name=paths,proto3" json:"paths,omitempty"`
	// Query is the query string that was used to create the DID. This is followed by a '?'.
	Query string `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`
	// Fragment is the fragment string that was used to create the DID. This is followed by a '#'.
	Fragment string `protobuf:"bytes,6,opt,name=fragment,proto3" json:"fragment,omitempty"`
}

func (x *Did) Reset() {
	*x = Did{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_did_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Did) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Did) ProtoMessage() {}

func (x *Did) ProtoReflect() protoreflect.Message {
	mi := &file_registry_did_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Did.ProtoReflect.Descriptor instead.
func (*Did) Descriptor() ([]byte, []int) {
	return file_registry_did_proto_rawDescGZIP(), []int{0}
}

func (x *Did) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Did) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Did) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Did) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *Did) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *Did) GetFragment() string {
	if x != nil {
		return x.Fragment
	}
	return ""
}

// DidDocument is the document that describes a DID. This document is stored on the blockchain.
type DidDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Context is the context of the DID document. This is used to identify the Service.
	Context []string `protobuf:"bytes,1,rep,name=context,proto3" json:"context,omitempty"` // optional
	// Id is the DID of the document.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Controller is the DID of the controller of the document. This will be the individual user devices and mailboxes.
	Controller []string `protobuf:"bytes,3,rep,name=controller,proto3" json:"controller,omitempty"` //optional
	// VerificationMethod is the list of verification methods for the user.
	VerificationMethod []*VerificationMethod `protobuf:"bytes,4,rep,name=verification_method,json=verificationMethod,proto3" json:"verification_method,omitempty"` // optional
	// Authentication is the list of authentication methods for the user.
	Authentication []string `protobuf:"bytes,5,rep,name=authentication,proto3" json:"authentication,omitempty"` // optional
	// AssertionMethod is the list of assertion methods for the user.
	AssertionMethod []string `protobuf:"bytes,6,rep,name=assertion_method,json=assertionMethod,proto3" json:"assertion_method,omitempty"` // optional
	// CapabilityInvocation is the list of capability invocation methods for the user.
	CapabilityInvocation []string `protobuf:"bytes,7,rep,name=capability_invocation,json=capabilityInvocation,proto3" json:"capability_invocation,omitempty"` // optional
	// CapabilityDelegation is the list of capability delegation methods for the user.
	CapabilityDelegation []string `protobuf:"bytes,8,rep,name=capability_delegation,json=capabilityDelegation,proto3" json:"capability_delegation,omitempty"` // optional
	// KeyAgreement is the list of key agreement methods for the user.
	KeyAgreement []string `protobuf:"bytes,9,rep,name=key_agreement,json=keyAgreement,proto3" json:"key_agreement,omitempty"` // optional
	// Service is the list of services or DApps that the user has access to.
	Service []*Service `protobuf:"bytes,10,rep,name=service,proto3" json:"service,omitempty"` // optional
	// AlsoKnownAs is the list of ".snr" aliases for the user.
	AlsoKnownAs []string `protobuf:"bytes,11,rep,name=also_known_as,json=alsoKnownAs,proto3" json:"also_known_as,omitempty"` // optional
	// Metadata is the metadata of the service.
	Metadata map[string]string `protobuf:"bytes,12,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // optional
}

func (x *DidDocument) Reset() {
	*x = DidDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_did_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DidDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DidDocument) ProtoMessage() {}

func (x *DidDocument) ProtoReflect() protoreflect.Message {
	mi := &file_registry_did_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DidDocument.ProtoReflect.Descriptor instead.
func (*DidDocument) Descriptor() ([]byte, []int) {
	return file_registry_did_proto_rawDescGZIP(), []int{1}
}

func (x *DidDocument) GetContext() []string {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *DidDocument) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DidDocument) GetController() []string {
	if x != nil {
		return x.Controller
	}
	return nil
}

func (x *DidDocument) GetVerificationMethod() []*VerificationMethod {
	if x != nil {
		return x.VerificationMethod
	}
	return nil
}

func (x *DidDocument) GetAuthentication() []string {
	if x != nil {
		return x.Authentication
	}
	return nil
}

func (x *DidDocument) GetAssertionMethod() []string {
	if x != nil {
		return x.AssertionMethod
	}
	return nil
}

func (x *DidDocument) GetCapabilityInvocation() []string {
	if x != nil {
		return x.CapabilityInvocation
	}
	return nil
}

func (x *DidDocument) GetCapabilityDelegation() []string {
	if x != nil {
		return x.CapabilityDelegation
	}
	return nil
}

func (x *DidDocument) GetKeyAgreement() []string {
	if x != nil {
		return x.KeyAgreement
	}
	return nil
}

func (x *DidDocument) GetService() []*Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *DidDocument) GetAlsoKnownAs() []string {
	if x != nil {
		return x.AlsoKnownAs
	}
	return nil
}

func (x *DidDocument) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Service is a Application that runs on the Sonr network.
type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the DID of the service.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type is the type of the service.
	Type ServiceType `protobuf:"varint,2,opt,name=type,proto3,enum=sonrio.sonr.registry.ServiceType" json:"type,omitempty"`
	// ServiceEndpoint is the endpoint of the service.
	ServiceEndpoint *ServiceEndpoint `protobuf:"bytes,3,opt,name=service_endpoint,json=serviceEndpoint,proto3" json:"service_endpoint,omitempty"`
	// Metadata is the metadata of the service.
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // optional
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_did_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_registry_did_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_registry_did_proto_rawDescGZIP(), []int{2}
}

func (x *Service) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Service) GetType() ServiceType {
	if x != nil {
		return x.Type
	}
	return ServiceType_SERVICE_TYPE_UNSPECIFIED
}

func (x *Service) GetServiceEndpoint() *ServiceEndpoint {
	if x != nil {
		return x.ServiceEndpoint
	}
	return nil
}

func (x *Service) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// ServiceEndpoint is the endpoint of the service.
type ServiceEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TransportType is the type of transport used to connect to the service.
	TransportType string `protobuf:"bytes,1,opt,name=transport_type,json=transportType,proto3" json:"transport_type,omitempty"`
	// Network is the network the service is on.
	Network string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	// SupportedProtocols is the list of protocols supported by the service.
	// (e.g. "channels", "buckets", "objects", "storage")
	SupportedProtocols []ServiceProtocol `protobuf:"varint,3,rep,packed,name=supported_protocols,json=supportedProtocols,proto3,enum=sonrio.sonr.registry.ServiceProtocol" json:"supported_protocols,omitempty"`
}

func (x *ServiceEndpoint) Reset() {
	*x = ServiceEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_did_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceEndpoint) ProtoMessage() {}

func (x *ServiceEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_registry_did_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceEndpoint.ProtoReflect.Descriptor instead.
func (*ServiceEndpoint) Descriptor() ([]byte, []int) {
	return file_registry_did_proto_rawDescGZIP(), []int{3}
}

func (x *ServiceEndpoint) GetTransportType() string {
	if x != nil {
		return x.TransportType
	}
	return ""
}

func (x *ServiceEndpoint) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ServiceEndpoint) GetSupportedProtocols() []ServiceProtocol {
	if x != nil {
		return x.SupportedProtocols
	}
	return nil
}

// VerificationMethod is a method that can be used to verify the DID.
type VerificationMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the DID of the verification method.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type is the type of the verification method.
	Type VerificationMethod_Type `protobuf:"varint,2,opt,name=type,proto3,enum=sonrio.sonr.registry.VerificationMethod_Type" json:"type,omitempty"`
	// Controller is the DID of the controller of the verification method.
	Controller string `protobuf:"bytes,3,opt,name=controller,proto3" json:"controller,omitempty"`
	// PublicKeyHex is the public key of the verification method in hexidecimal.
	PublicKeyHex string `protobuf:"bytes,4,opt,name=public_key_hex,json=publicKeyHex,proto3" json:"public_key_hex,omitempty"` // optional
	// PublicKeyBase58 is the public key of the verification method in base58.
	PublicKeyBase58 string `protobuf:"bytes,5,opt,name=public_key_base58,json=publicKeyBase58,proto3" json:"public_key_base58,omitempty"` // optional
	// BlockchainAccountId is the blockchain account id of the verification method.
	BlockchainAccountId string `protobuf:"bytes,6,opt,name=blockchain_account_id,json=blockchainAccountId,proto3" json:"blockchain_account_id,omitempty"` // optional
}

func (x *VerificationMethod) Reset() {
	*x = VerificationMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_did_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerificationMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerificationMethod) ProtoMessage() {}

func (x *VerificationMethod) ProtoReflect() protoreflect.Message {
	mi := &file_registry_did_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerificationMethod.ProtoReflect.Descriptor instead.
func (*VerificationMethod) Descriptor() ([]byte, []int) {
	return file_registry_did_proto_rawDescGZIP(), []int{4}
}

func (x *VerificationMethod) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VerificationMethod) GetType() VerificationMethod_Type {
	if x != nil {
		return x.Type
	}
	return VerificationMethod_TYPE_UNSPECIFIED
}

func (x *VerificationMethod) GetController() string {
	if x != nil {
		return x.Controller
	}
	return ""
}

func (x *VerificationMethod) GetPublicKeyHex() string {
	if x != nil {
		return x.PublicKeyHex
	}
	return ""
}

func (x *VerificationMethod) GetPublicKeyBase58() string {
	if x != nil {
		return x.PublicKeyBase58
	}
	return ""
}

func (x *VerificationMethod) GetBlockchainAccountId() string {
	if x != nil {
		return x.BlockchainAccountId
	}
	return ""
}

var File_registry_did_proto protoreflect.FileDescriptor

var file_registry_did_proto_rawDesc = []byte{
	0x0a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x64, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x73, 0x6f, 0x6e, 0x72, 0x69, 0x6f, 0x2e, 0x73, 0x6f, 0x6e,
	0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x22, 0x8f, 0x01, 0x0a, 0x03, 0x44,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xfb, 0x04, 0x0a,
	0x0b, 0x44, 0x69, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x69, 0x6f, 0x2e, 0x73, 0x6f, 0x6e,
	0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x12, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x73, 0x73,
	0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x14, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x69, 0x6f, 0x2e, 0x73, 0x6f,
	0x6e, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x61, 0x6c, 0x73, 0x6f, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6c, 0x73, 0x6f, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x73,
	0x12, 0x4b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x69, 0x6f, 0x2e, 0x73, 0x6f, 0x6e, 0x72,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x64, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a,
	0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa8, 0x02, 0x0a, 0x07, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x69, 0x6f, 0x2e, 0x73, 0x6f,
	0x6e, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a,
	0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x69, 0x6f,
	0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x47, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x69, 0x6f, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaa, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x56, 0x0a, 0x13, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x69, 0x6f,
	0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x12,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x22, 0xc4, 0x03, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x69, 0x6f,
	0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x48,
	0x65, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x35, 0x38, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x35, 0x38, 0x12, 0x32,
	0x0a, 0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f,
	0x53, 0x45, 0x43, 0x50, 0x32, 0x35, 0x36, 0x4b, 0x31, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x58, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x44, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4c, 0x53, 0x5f, 0x31, 0x32, 0x33, 0x38, 0x31,
	0x5f, 0x47, 0x31, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4c,
	0x53, 0x5f, 0x31, 0x32, 0x33, 0x38, 0x31, 0x5f, 0x47, 0x32, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x2a, 0x78, 0x0a, 0x0b, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x4e, 0x45,
	0x54, 0x10, 0x03, 0x2a, 0xad, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x42, 0x55,
	0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x53, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x10, 0x04, 0x2a, 0x88, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x44, 0x5f, 0x44, 0x4f,
	0x4d, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x4e, 0x52, 0x10, 0x03, 0x42, 0x2c,
	0x5a, 0x2a, 0x67, 0x6f, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67,
	0x72, 0x70, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x6f, 0x6e, 0x72, 0x2d, 0x69, 0x6f, 0x2f, 0x73,
	0x6f, 0x6e, 0x72, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_registry_did_proto_rawDescOnce sync.Once
	file_registry_did_proto_rawDescData = file_registry_did_proto_rawDesc
)

func file_registry_did_proto_rawDescGZIP() []byte {
	file_registry_did_proto_rawDescOnce.Do(func() {
		file_registry_did_proto_rawDescData = protoimpl.X.CompressGZIP(file_registry_did_proto_rawDescData)
	})
	return file_registry_did_proto_rawDescData
}

var file_registry_did_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_registry_did_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_registry_did_proto_goTypes = []interface{}{
	(NetworkType)(0),             // 0: sonrio.sonr.registry.NetworkType
	(ServiceProtocol)(0),         // 1: sonrio.sonr.registry.ServiceProtocol
	(ServiceType)(0),             // 2: sonrio.sonr.registry.ServiceType
	(VerificationMethod_Type)(0), // 3: sonrio.sonr.registry.VerificationMethod.Type
	(*Did)(nil),                  // 4: sonrio.sonr.registry.Did
	(*DidDocument)(nil),          // 5: sonrio.sonr.registry.DidDocument
	(*Service)(nil),              // 6: sonrio.sonr.registry.Service
	(*ServiceEndpoint)(nil),      // 7: sonrio.sonr.registry.ServiceEndpoint
	(*VerificationMethod)(nil),   // 8: sonrio.sonr.registry.VerificationMethod
	nil,                          // 9: sonrio.sonr.registry.DidDocument.MetadataEntry
	nil,                          // 10: sonrio.sonr.registry.Service.MetadataEntry
}
var file_registry_did_proto_depIdxs = []int32{
	8,  // 0: sonrio.sonr.registry.DidDocument.verification_method:type_name -> sonrio.sonr.registry.VerificationMethod
	6,  // 1: sonrio.sonr.registry.DidDocument.service:type_name -> sonrio.sonr.registry.Service
	9,  // 2: sonrio.sonr.registry.DidDocument.metadata:type_name -> sonrio.sonr.registry.DidDocument.MetadataEntry
	2,  // 3: sonrio.sonr.registry.Service.type:type_name -> sonrio.sonr.registry.ServiceType
	7,  // 4: sonrio.sonr.registry.Service.service_endpoint:type_name -> sonrio.sonr.registry.ServiceEndpoint
	10, // 5: sonrio.sonr.registry.Service.metadata:type_name -> sonrio.sonr.registry.Service.MetadataEntry
	1,  // 6: sonrio.sonr.registry.ServiceEndpoint.supported_protocols:type_name -> sonrio.sonr.registry.ServiceProtocol
	3,  // 7: sonrio.sonr.registry.VerificationMethod.type:type_name -> sonrio.sonr.registry.VerificationMethod.Type
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_registry_did_proto_init() }
func file_registry_did_proto_init() {
	if File_registry_did_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_registry_did_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Did); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_did_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DidDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_did_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_did_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_did_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerificationMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_registry_did_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_registry_did_proto_goTypes,
		DependencyIndexes: file_registry_did_proto_depIdxs,
		EnumInfos:         file_registry_did_proto_enumTypes,
		MessageInfos:      file_registry_did_proto_msgTypes,
	}.Build()
	File_registry_did_proto = out.File
	file_registry_did_proto_rawDesc = nil
	file_registry_did_proto_goTypes = nil
	file_registry_did_proto_depIdxs = nil
}
