// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: v1/highway.proto

package highwayv1

import (
	context "context"
	bucket "go.buf.build/grpc/go/sonr-io/sonr/bucket"
	channel "go.buf.build/grpc/go/sonr-io/sonr/channel"
	object "go.buf.build/grpc/go/sonr-io/sonr/object"
	registry "go.buf.build/grpc/go/sonr-io/sonr/registry"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HighwayServiceClient is the client API for HighwayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HighwayServiceClient interface {
	// AccessName returns details and publicly available information about the Peer given calling node
	// has permission to access. i.e "prad.snr" -> "firstname online profilePic city"
	AccessName(ctx context.Context, in *AccessNameRequest, opts ...grpc.CallOption) (*AccessNameResponse, error)
	// RegisterName registers a new ".snr" name for the calling node. It is only allowed to be called
	// once per node.
	RegisterName(ctx context.Context, in *registry.MsgRegisterName, opts ...grpc.CallOption) (*registry.MsgRegisterNameResponse, error)
	// UpdateName updates the public information of the calling node.
	UpdateName(ctx context.Context, in *registry.MsgUpdateName, opts ...grpc.CallOption) (*registry.MsgUpdateNameResponse, error)
	// AccessService creates a new signing key for the calling node in order to be authorized to
	// access the service. It is only allowed to be called once per node.
	AccessService(ctx context.Context, in *AccessServiceRequest, opts ...grpc.CallOption) (*AccessServiceResponse, error)
	// RegisterService registers a new service for the calling node. The calling node must have
	// already been enabled for development.
	RegisterService(ctx context.Context, in *registry.MsgRegisterService, opts ...grpc.CallOption) (*registry.MsgRegisterServiceResponse, error)
	// UpdateService updates the details and public configuration of the calling node's service.
	UpdateService(ctx context.Context, in *registry.MsgUpdateService, opts ...grpc.CallOption) (*registry.MsgUpdateServiceResponse, error)
	// CreateChannel creates a new Publish/Subscribe topic channel for the given service.
	// The calling node must have already registered a service for the channel.
	CreateChannel(ctx context.Context, in *channel.MsgCreateChannel, opts ...grpc.CallOption) (*channel.MsgCreateChannelResponse, error)
	// ReadChannel lists all peers subscribed to the given channel, and additional details about
	// the channels configuration.
	ReadChannel(ctx context.Context, in *channel.MsgReadChannel, opts ...grpc.CallOption) (*channel.MsgReadChannelResponse, error)
	// UpdateChannel updates the configuration of the given channel.
	UpdateChannel(ctx context.Context, in *channel.MsgUpdateChannel, opts ...grpc.CallOption) (*channel.MsgUpdateChannelResponse, error)
	// DeleteChannel deletes the given channel if the calling node is the owner of the channel.
	DeleteChannel(ctx context.Context, in *channel.MsgDeleteChannel, opts ...grpc.CallOption) (*channel.MsgDeleteChannelResponse, error)
	// ListenChannel subscribes the calling node to the given channel and returns all publish events
	// as a stream.
	ListenChannel(ctx context.Context, in *ListenChannelRequest, opts ...grpc.CallOption) (HighwayService_ListenChannelClient, error)
	// CreateBucket creates a new bucket for the calling nodes service.
	CreateBucket(ctx context.Context, in *bucket.MsgCreateBucket, opts ...grpc.CallOption) (*bucket.MsgCreateBucketResponse, error)
	// ReadBucket lists all the blobs in the given bucket. The calling node must have access to the
	// bucket.
	ReadBucket(ctx context.Context, in *bucket.MsgReadBucket, opts ...grpc.CallOption) (*bucket.MsgReadBucketResponse, error)
	// UpdateBucket updates the configuration of the given bucket. The calling node must have access
	// to the bucket.
	UpdateBucket(ctx context.Context, in *bucket.MsgUpdateBucket, opts ...grpc.CallOption) (*bucket.MsgUpdateBucketResponse, error)
	// DeleteBucket deletes the given bucket if the calling node is the owner of the bucket.
	DeleteBucket(ctx context.Context, in *bucket.MsgDeleteBucket, opts ...grpc.CallOption) (*bucket.MsgDeleteBucketResponse, error)
	// ListenBucket subscribes the calling node to the given bucket and returns all publish events
	// as a stream.
	ListenBucket(ctx context.Context, in *ListenBucketRequest, opts ...grpc.CallOption) (HighwayService_ListenBucketClient, error)
	// CreateObject defines a new object to be utilized by the calling node's service. The object will
	// be placed in the Highway Service Graph and can be used in channels and other modules.
	CreateObject(ctx context.Context, in *object.MsgCreateObject, opts ...grpc.CallOption) (*object.MsgCreateObjectResponse, error)
	// ReadObject returns the details of the given object provided its DID or Label.
	ReadObject(ctx context.Context, in *object.MsgReadObject, opts ...grpc.CallOption) (*object.MsgReadObjectResponse, error)
	// UpdateObject modifies the property fields of the given object.
	UpdateObject(ctx context.Context, in *object.MsgUpdateObject, opts ...grpc.CallOption) (*object.MsgUpdateObjectResponse, error)
	// DeleteObject deletes the given object if the calling node is the owner of the object.
	DeleteObject(ctx context.Context, in *object.MsgDeleteObject, opts ...grpc.CallOption) (*object.MsgDeleteObjectResponse, error)
	// UploadBlob uploads a file or buffer to the calling node's service IPFS storage.
	UploadBlob(ctx context.Context, in *UploadBlobRequest, opts ...grpc.CallOption) (HighwayService_UploadBlobClient, error)
	// DownloadBlob downloads a file or buffer from the calling node's service IPFS storage.
	DownloadBlob(ctx context.Context, in *DownloadBlobRequest, opts ...grpc.CallOption) (HighwayService_DownloadBlobClient, error)
	// SyncBlob synchronizes a local file from the calling node to the given service's IPFS storage.
	SyncBlob(ctx context.Context, in *SyncBlobRequest, opts ...grpc.CallOption) (HighwayService_SyncBlobClient, error)
	// DeleteBlob deletes the given file from the calling node's service IPFS storage.
	DeleteBlob(ctx context.Context, in *DeleteBlobRequest, opts ...grpc.CallOption) (*DeleteBlobResponse, error)
	// ParseDid parses a potential DID string into a DID object.
	ParseDid(ctx context.Context, in *ParseDidRequest, opts ...grpc.CallOption) (*ParseDidResponse, error)
	// ResolveDid resolves a DID to its DID document if the DID is valid and the calling node has
	// access to the DID Document.
	ResolveDid(ctx context.Context, in *ResolveDidRequest, opts ...grpc.CallOption) (*ResolveDidResponse, error)
}

type highwayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHighwayServiceClient(cc grpc.ClientConnInterface) HighwayServiceClient {
	return &highwayServiceClient{cc}
}

func (c *highwayServiceClient) AccessName(ctx context.Context, in *AccessNameRequest, opts ...grpc.CallOption) (*AccessNameResponse, error) {
	out := new(AccessNameResponse)
	err := c.cc.Invoke(ctx, "/highway.v1.HighwayService/AccessName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) RegisterName(ctx context.Context, in *registry.MsgRegisterName, opts ...grpc.CallOption) (*registry.MsgRegisterNameResponse, error) {
	out := new(registry.MsgRegisterNameResponse)
	err := c.cc.Invoke(ctx, "/highway.v1.HighwayService/RegisterName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) UpdateName(ctx context.Context, in *registry.MsgUpdateName, opts ...grpc.CallOption) (*registry.MsgUpdateNameResponse, error) {
	out := new(registry.MsgUpdateNameResponse)
	err := c.cc.Invoke(ctx, "/highway.v1.HighwayService/UpdateName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) AccessService(ctx context.Context, in *AccessServiceRequest, opts ...grpc.CallOption) (*AccessServiceResponse, error) {
	out := new(AccessServiceResponse)
	err := c.cc.Invoke(ctx, "/highway.v1.HighwayService/AccessService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) RegisterService(ctx context.Context, in *registry.MsgRegisterService, opts ...grpc.CallOption) (*registry.MsgRegisterServiceResponse, error) {
	out := new(registry.MsgRegisterServiceResponse)
	err := c.cc.Invoke(ctx, "/highway.v1.HighwayService/RegisterService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) UpdateService(ctx context.Context, in *registry.MsgUpdateService, opts ...grpc.CallOption) (*registry.MsgUpdateServiceResponse, error) {
	out := new(registry.MsgUpdateServiceResponse)
	err := c.cc.Invoke(ctx, "/highway.v1.HighwayService/UpdateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) CreateChannel(ctx context.Context, in *channel.MsgCreateChannel, opts ...grpc.CallOption) (*channel.MsgCreateChannelResponse, error) {
	out := new(channel.MsgCreateChannelResponse)
	err := c.cc.Invoke(ctx, "/highway.v1.HighwayService/CreateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) ReadChannel(ctx context.Context, in *channel.MsgReadChannel, opts ...grpc.CallOption) (*channel.MsgReadChannelResponse, error) {
	out := new(channel.MsgReadChannelResponse)
	err := c.cc.Invoke(ctx, "/highway.v1.HighwayService/ReadChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) UpdateChannel(ctx context.Context, in *channel.MsgUpdateChannel, opts ...grpc.CallOption) (*channel.MsgUpdateChannelResponse, error) {
	out := new(channel.MsgUpdateChannelResponse)
	err := c.cc.Invoke(ctx, "/highway.v1.HighwayService/UpdateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) DeleteChannel(ctx context.Context, in *channel.MsgDeleteChannel, opts ...grpc.CallOption) (*channel.MsgDeleteChannelResponse, error) {
	out := new(channel.MsgDeleteChannelResponse)
	err := c.cc.Invoke(ctx, "/highway.v1.HighwayService/DeleteChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) ListenChannel(ctx context.Context, in *ListenChannelRequest, opts ...grpc.CallOption) (HighwayService_ListenChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &HighwayService_ServiceDesc.Streams[0], "/highway.v1.HighwayService/ListenChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &highwayServiceListenChannelClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HighwayService_ListenChannelClient interface {
	Recv() (*channel.ChannelMessage, error)
	grpc.ClientStream
}

type highwayServiceListenChannelClient struct {
	grpc.ClientStream
}

func (x *highwayServiceListenChannelClient) Recv() (*channel.ChannelMessage, error) {
	m := new(channel.ChannelMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *highwayServiceClient) CreateBucket(ctx context.Context, in *bucket.MsgCreateBucket, opts ...grpc.CallOption) (*bucket.MsgCreateBucketResponse, error) {
	out := new(bucket.MsgCreateBucketResponse)
	err := c.cc.Invoke(ctx, "/highway.v1.HighwayService/CreateBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) ReadBucket(ctx context.Context, in *bucket.MsgReadBucket, opts ...grpc.CallOption) (*bucket.MsgReadBucketResponse, error) {
	out := new(bucket.MsgReadBucketResponse)
	err := c.cc.Invoke(ctx, "/highway.v1.HighwayService/ReadBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) UpdateBucket(ctx context.Context, in *bucket.MsgUpdateBucket, opts ...grpc.CallOption) (*bucket.MsgUpdateBucketResponse, error) {
	out := new(bucket.MsgUpdateBucketResponse)
	err := c.cc.Invoke(ctx, "/highway.v1.HighwayService/UpdateBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) DeleteBucket(ctx context.Context, in *bucket.MsgDeleteBucket, opts ...grpc.CallOption) (*bucket.MsgDeleteBucketResponse, error) {
	out := new(bucket.MsgDeleteBucketResponse)
	err := c.cc.Invoke(ctx, "/highway.v1.HighwayService/DeleteBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) ListenBucket(ctx context.Context, in *ListenBucketRequest, opts ...grpc.CallOption) (HighwayService_ListenBucketClient, error) {
	stream, err := c.cc.NewStream(ctx, &HighwayService_ServiceDesc.Streams[1], "/highway.v1.HighwayService/ListenBucket", opts...)
	if err != nil {
		return nil, err
	}
	x := &highwayServiceListenBucketClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HighwayService_ListenBucketClient interface {
	Recv() (*ListenBucketResponse, error)
	grpc.ClientStream
}

type highwayServiceListenBucketClient struct {
	grpc.ClientStream
}

func (x *highwayServiceListenBucketClient) Recv() (*ListenBucketResponse, error) {
	m := new(ListenBucketResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *highwayServiceClient) CreateObject(ctx context.Context, in *object.MsgCreateObject, opts ...grpc.CallOption) (*object.MsgCreateObjectResponse, error) {
	out := new(object.MsgCreateObjectResponse)
	err := c.cc.Invoke(ctx, "/highway.v1.HighwayService/CreateObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) ReadObject(ctx context.Context, in *object.MsgReadObject, opts ...grpc.CallOption) (*object.MsgReadObjectResponse, error) {
	out := new(object.MsgReadObjectResponse)
	err := c.cc.Invoke(ctx, "/highway.v1.HighwayService/ReadObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) UpdateObject(ctx context.Context, in *object.MsgUpdateObject, opts ...grpc.CallOption) (*object.MsgUpdateObjectResponse, error) {
	out := new(object.MsgUpdateObjectResponse)
	err := c.cc.Invoke(ctx, "/highway.v1.HighwayService/UpdateObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) DeleteObject(ctx context.Context, in *object.MsgDeleteObject, opts ...grpc.CallOption) (*object.MsgDeleteObjectResponse, error) {
	out := new(object.MsgDeleteObjectResponse)
	err := c.cc.Invoke(ctx, "/highway.v1.HighwayService/DeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) UploadBlob(ctx context.Context, in *UploadBlobRequest, opts ...grpc.CallOption) (HighwayService_UploadBlobClient, error) {
	stream, err := c.cc.NewStream(ctx, &HighwayService_ServiceDesc.Streams[2], "/highway.v1.HighwayService/UploadBlob", opts...)
	if err != nil {
		return nil, err
	}
	x := &highwayServiceUploadBlobClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HighwayService_UploadBlobClient interface {
	Recv() (*UploadBlobResponse, error)
	grpc.ClientStream
}

type highwayServiceUploadBlobClient struct {
	grpc.ClientStream
}

func (x *highwayServiceUploadBlobClient) Recv() (*UploadBlobResponse, error) {
	m := new(UploadBlobResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *highwayServiceClient) DownloadBlob(ctx context.Context, in *DownloadBlobRequest, opts ...grpc.CallOption) (HighwayService_DownloadBlobClient, error) {
	stream, err := c.cc.NewStream(ctx, &HighwayService_ServiceDesc.Streams[3], "/highway.v1.HighwayService/DownloadBlob", opts...)
	if err != nil {
		return nil, err
	}
	x := &highwayServiceDownloadBlobClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HighwayService_DownloadBlobClient interface {
	Recv() (*DownloadBlobResponse, error)
	grpc.ClientStream
}

type highwayServiceDownloadBlobClient struct {
	grpc.ClientStream
}

func (x *highwayServiceDownloadBlobClient) Recv() (*DownloadBlobResponse, error) {
	m := new(DownloadBlobResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *highwayServiceClient) SyncBlob(ctx context.Context, in *SyncBlobRequest, opts ...grpc.CallOption) (HighwayService_SyncBlobClient, error) {
	stream, err := c.cc.NewStream(ctx, &HighwayService_ServiceDesc.Streams[4], "/highway.v1.HighwayService/SyncBlob", opts...)
	if err != nil {
		return nil, err
	}
	x := &highwayServiceSyncBlobClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HighwayService_SyncBlobClient interface {
	Recv() (*SyncBlobResponse, error)
	grpc.ClientStream
}

type highwayServiceSyncBlobClient struct {
	grpc.ClientStream
}

func (x *highwayServiceSyncBlobClient) Recv() (*SyncBlobResponse, error) {
	m := new(SyncBlobResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *highwayServiceClient) DeleteBlob(ctx context.Context, in *DeleteBlobRequest, opts ...grpc.CallOption) (*DeleteBlobResponse, error) {
	out := new(DeleteBlobResponse)
	err := c.cc.Invoke(ctx, "/highway.v1.HighwayService/DeleteBlob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) ParseDid(ctx context.Context, in *ParseDidRequest, opts ...grpc.CallOption) (*ParseDidResponse, error) {
	out := new(ParseDidResponse)
	err := c.cc.Invoke(ctx, "/highway.v1.HighwayService/ParseDid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) ResolveDid(ctx context.Context, in *ResolveDidRequest, opts ...grpc.CallOption) (*ResolveDidResponse, error) {
	out := new(ResolveDidResponse)
	err := c.cc.Invoke(ctx, "/highway.v1.HighwayService/ResolveDid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HighwayServiceServer is the server API for HighwayService service.
// All implementations should embed UnimplementedHighwayServiceServer
// for forward compatibility
type HighwayServiceServer interface {
	// AccessName returns details and publicly available information about the Peer given calling node
	// has permission to access. i.e "prad.snr" -> "firstname online profilePic city"
	AccessName(context.Context, *AccessNameRequest) (*AccessNameResponse, error)
	// RegisterName registers a new ".snr" name for the calling node. It is only allowed to be called
	// once per node.
	RegisterName(context.Context, *registry.MsgRegisterName) (*registry.MsgRegisterNameResponse, error)
	// UpdateName updates the public information of the calling node.
	UpdateName(context.Context, *registry.MsgUpdateName) (*registry.MsgUpdateNameResponse, error)
	// AccessService creates a new signing key for the calling node in order to be authorized to
	// access the service. It is only allowed to be called once per node.
	AccessService(context.Context, *AccessServiceRequest) (*AccessServiceResponse, error)
	// RegisterService registers a new service for the calling node. The calling node must have
	// already been enabled for development.
	RegisterService(context.Context, *registry.MsgRegisterService) (*registry.MsgRegisterServiceResponse, error)
	// UpdateService updates the details and public configuration of the calling node's service.
	UpdateService(context.Context, *registry.MsgUpdateService) (*registry.MsgUpdateServiceResponse, error)
	// CreateChannel creates a new Publish/Subscribe topic channel for the given service.
	// The calling node must have already registered a service for the channel.
	CreateChannel(context.Context, *channel.MsgCreateChannel) (*channel.MsgCreateChannelResponse, error)
	// ReadChannel lists all peers subscribed to the given channel, and additional details about
	// the channels configuration.
	ReadChannel(context.Context, *channel.MsgReadChannel) (*channel.MsgReadChannelResponse, error)
	// UpdateChannel updates the configuration of the given channel.
	UpdateChannel(context.Context, *channel.MsgUpdateChannel) (*channel.MsgUpdateChannelResponse, error)
	// DeleteChannel deletes the given channel if the calling node is the owner of the channel.
	DeleteChannel(context.Context, *channel.MsgDeleteChannel) (*channel.MsgDeleteChannelResponse, error)
	// ListenChannel subscribes the calling node to the given channel and returns all publish events
	// as a stream.
	ListenChannel(*ListenChannelRequest, HighwayService_ListenChannelServer) error
	// CreateBucket creates a new bucket for the calling nodes service.
	CreateBucket(context.Context, *bucket.MsgCreateBucket) (*bucket.MsgCreateBucketResponse, error)
	// ReadBucket lists all the blobs in the given bucket. The calling node must have access to the
	// bucket.
	ReadBucket(context.Context, *bucket.MsgReadBucket) (*bucket.MsgReadBucketResponse, error)
	// UpdateBucket updates the configuration of the given bucket. The calling node must have access
	// to the bucket.
	UpdateBucket(context.Context, *bucket.MsgUpdateBucket) (*bucket.MsgUpdateBucketResponse, error)
	// DeleteBucket deletes the given bucket if the calling node is the owner of the bucket.
	DeleteBucket(context.Context, *bucket.MsgDeleteBucket) (*bucket.MsgDeleteBucketResponse, error)
	// ListenBucket subscribes the calling node to the given bucket and returns all publish events
	// as a stream.
	ListenBucket(*ListenBucketRequest, HighwayService_ListenBucketServer) error
	// CreateObject defines a new object to be utilized by the calling node's service. The object will
	// be placed in the Highway Service Graph and can be used in channels and other modules.
	CreateObject(context.Context, *object.MsgCreateObject) (*object.MsgCreateObjectResponse, error)
	// ReadObject returns the details of the given object provided its DID or Label.
	ReadObject(context.Context, *object.MsgReadObject) (*object.MsgReadObjectResponse, error)
	// UpdateObject modifies the property fields of the given object.
	UpdateObject(context.Context, *object.MsgUpdateObject) (*object.MsgUpdateObjectResponse, error)
	// DeleteObject deletes the given object if the calling node is the owner of the object.
	DeleteObject(context.Context, *object.MsgDeleteObject) (*object.MsgDeleteObjectResponse, error)
	// UploadBlob uploads a file or buffer to the calling node's service IPFS storage.
	UploadBlob(*UploadBlobRequest, HighwayService_UploadBlobServer) error
	// DownloadBlob downloads a file or buffer from the calling node's service IPFS storage.
	DownloadBlob(*DownloadBlobRequest, HighwayService_DownloadBlobServer) error
	// SyncBlob synchronizes a local file from the calling node to the given service's IPFS storage.
	SyncBlob(*SyncBlobRequest, HighwayService_SyncBlobServer) error
	// DeleteBlob deletes the given file from the calling node's service IPFS storage.
	DeleteBlob(context.Context, *DeleteBlobRequest) (*DeleteBlobResponse, error)
	// ParseDid parses a potential DID string into a DID object.
	ParseDid(context.Context, *ParseDidRequest) (*ParseDidResponse, error)
	// ResolveDid resolves a DID to its DID document if the DID is valid and the calling node has
	// access to the DID Document.
	ResolveDid(context.Context, *ResolveDidRequest) (*ResolveDidResponse, error)
}

// UnimplementedHighwayServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHighwayServiceServer struct {
}

func (UnimplementedHighwayServiceServer) AccessName(context.Context, *AccessNameRequest) (*AccessNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessName not implemented")
}
func (UnimplementedHighwayServiceServer) RegisterName(context.Context, *registry.MsgRegisterName) (*registry.MsgRegisterNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterName not implemented")
}
func (UnimplementedHighwayServiceServer) UpdateName(context.Context, *registry.MsgUpdateName) (*registry.MsgUpdateNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateName not implemented")
}
func (UnimplementedHighwayServiceServer) AccessService(context.Context, *AccessServiceRequest) (*AccessServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessService not implemented")
}
func (UnimplementedHighwayServiceServer) RegisterService(context.Context, *registry.MsgRegisterService) (*registry.MsgRegisterServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterService not implemented")
}
func (UnimplementedHighwayServiceServer) UpdateService(context.Context, *registry.MsgUpdateService) (*registry.MsgUpdateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateService not implemented")
}
func (UnimplementedHighwayServiceServer) CreateChannel(context.Context, *channel.MsgCreateChannel) (*channel.MsgCreateChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedHighwayServiceServer) ReadChannel(context.Context, *channel.MsgReadChannel) (*channel.MsgReadChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadChannel not implemented")
}
func (UnimplementedHighwayServiceServer) UpdateChannel(context.Context, *channel.MsgUpdateChannel) (*channel.MsgUpdateChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannel not implemented")
}
func (UnimplementedHighwayServiceServer) DeleteChannel(context.Context, *channel.MsgDeleteChannel) (*channel.MsgDeleteChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (UnimplementedHighwayServiceServer) ListenChannel(*ListenChannelRequest, HighwayService_ListenChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenChannel not implemented")
}
func (UnimplementedHighwayServiceServer) CreateBucket(context.Context, *bucket.MsgCreateBucket) (*bucket.MsgCreateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucket not implemented")
}
func (UnimplementedHighwayServiceServer) ReadBucket(context.Context, *bucket.MsgReadBucket) (*bucket.MsgReadBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadBucket not implemented")
}
func (UnimplementedHighwayServiceServer) UpdateBucket(context.Context, *bucket.MsgUpdateBucket) (*bucket.MsgUpdateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBucket not implemented")
}
func (UnimplementedHighwayServiceServer) DeleteBucket(context.Context, *bucket.MsgDeleteBucket) (*bucket.MsgDeleteBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBucket not implemented")
}
func (UnimplementedHighwayServiceServer) ListenBucket(*ListenBucketRequest, HighwayService_ListenBucketServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenBucket not implemented")
}
func (UnimplementedHighwayServiceServer) CreateObject(context.Context, *object.MsgCreateObject) (*object.MsgCreateObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObject not implemented")
}
func (UnimplementedHighwayServiceServer) ReadObject(context.Context, *object.MsgReadObject) (*object.MsgReadObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadObject not implemented")
}
func (UnimplementedHighwayServiceServer) UpdateObject(context.Context, *object.MsgUpdateObject) (*object.MsgUpdateObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObject not implemented")
}
func (UnimplementedHighwayServiceServer) DeleteObject(context.Context, *object.MsgDeleteObject) (*object.MsgDeleteObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedHighwayServiceServer) UploadBlob(*UploadBlobRequest, HighwayService_UploadBlobServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadBlob not implemented")
}
func (UnimplementedHighwayServiceServer) DownloadBlob(*DownloadBlobRequest, HighwayService_DownloadBlobServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadBlob not implemented")
}
func (UnimplementedHighwayServiceServer) SyncBlob(*SyncBlobRequest, HighwayService_SyncBlobServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncBlob not implemented")
}
func (UnimplementedHighwayServiceServer) DeleteBlob(context.Context, *DeleteBlobRequest) (*DeleteBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlob not implemented")
}
func (UnimplementedHighwayServiceServer) ParseDid(context.Context, *ParseDidRequest) (*ParseDidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseDid not implemented")
}
func (UnimplementedHighwayServiceServer) ResolveDid(context.Context, *ResolveDidRequest) (*ResolveDidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveDid not implemented")
}

// UnsafeHighwayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HighwayServiceServer will
// result in compilation errors.
type UnsafeHighwayServiceServer interface {
	mustEmbedUnimplementedHighwayServiceServer()
}

func RegisterHighwayServiceServer(s grpc.ServiceRegistrar, srv HighwayServiceServer) {
	s.RegisterService(&HighwayService_ServiceDesc, srv)
}

func _HighwayService_AccessName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).AccessName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/highway.v1.HighwayService/AccessName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).AccessName(ctx, req.(*AccessNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_RegisterName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(registry.MsgRegisterName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).RegisterName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/highway.v1.HighwayService/RegisterName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).RegisterName(ctx, req.(*registry.MsgRegisterName))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_UpdateName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(registry.MsgUpdateName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).UpdateName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/highway.v1.HighwayService/UpdateName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).UpdateName(ctx, req.(*registry.MsgUpdateName))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_AccessService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).AccessService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/highway.v1.HighwayService/AccessService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).AccessService(ctx, req.(*AccessServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(registry.MsgRegisterService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/highway.v1.HighwayService/RegisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).RegisterService(ctx, req.(*registry.MsgRegisterService))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_UpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(registry.MsgUpdateService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).UpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/highway.v1.HighwayService/UpdateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).UpdateService(ctx, req.(*registry.MsgUpdateService))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(channel.MsgCreateChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/highway.v1.HighwayService/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).CreateChannel(ctx, req.(*channel.MsgCreateChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_ReadChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(channel.MsgReadChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).ReadChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/highway.v1.HighwayService/ReadChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).ReadChannel(ctx, req.(*channel.MsgReadChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_UpdateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(channel.MsgUpdateChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).UpdateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/highway.v1.HighwayService/UpdateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).UpdateChannel(ctx, req.(*channel.MsgUpdateChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(channel.MsgDeleteChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/highway.v1.HighwayService/DeleteChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).DeleteChannel(ctx, req.(*channel.MsgDeleteChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_ListenChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenChannelRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HighwayServiceServer).ListenChannel(m, &highwayServiceListenChannelServer{stream})
}

type HighwayService_ListenChannelServer interface {
	Send(*channel.ChannelMessage) error
	grpc.ServerStream
}

type highwayServiceListenChannelServer struct {
	grpc.ServerStream
}

func (x *highwayServiceListenChannelServer) Send(m *channel.ChannelMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _HighwayService_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bucket.MsgCreateBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/highway.v1.HighwayService/CreateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).CreateBucket(ctx, req.(*bucket.MsgCreateBucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_ReadBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bucket.MsgReadBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).ReadBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/highway.v1.HighwayService/ReadBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).ReadBucket(ctx, req.(*bucket.MsgReadBucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_UpdateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bucket.MsgUpdateBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).UpdateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/highway.v1.HighwayService/UpdateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).UpdateBucket(ctx, req.(*bucket.MsgUpdateBucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_DeleteBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bucket.MsgDeleteBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).DeleteBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/highway.v1.HighwayService/DeleteBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).DeleteBucket(ctx, req.(*bucket.MsgDeleteBucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_ListenBucket_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenBucketRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HighwayServiceServer).ListenBucket(m, &highwayServiceListenBucketServer{stream})
}

type HighwayService_ListenBucketServer interface {
	Send(*ListenBucketResponse) error
	grpc.ServerStream
}

type highwayServiceListenBucketServer struct {
	grpc.ServerStream
}

func (x *highwayServiceListenBucketServer) Send(m *ListenBucketResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HighwayService_CreateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(object.MsgCreateObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).CreateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/highway.v1.HighwayService/CreateObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).CreateObject(ctx, req.(*object.MsgCreateObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_ReadObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(object.MsgReadObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).ReadObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/highway.v1.HighwayService/ReadObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).ReadObject(ctx, req.(*object.MsgReadObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_UpdateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(object.MsgUpdateObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).UpdateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/highway.v1.HighwayService/UpdateObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).UpdateObject(ctx, req.(*object.MsgUpdateObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(object.MsgDeleteObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/highway.v1.HighwayService/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).DeleteObject(ctx, req.(*object.MsgDeleteObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_UploadBlob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UploadBlobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HighwayServiceServer).UploadBlob(m, &highwayServiceUploadBlobServer{stream})
}

type HighwayService_UploadBlobServer interface {
	Send(*UploadBlobResponse) error
	grpc.ServerStream
}

type highwayServiceUploadBlobServer struct {
	grpc.ServerStream
}

func (x *highwayServiceUploadBlobServer) Send(m *UploadBlobResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HighwayService_DownloadBlob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadBlobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HighwayServiceServer).DownloadBlob(m, &highwayServiceDownloadBlobServer{stream})
}

type HighwayService_DownloadBlobServer interface {
	Send(*DownloadBlobResponse) error
	grpc.ServerStream
}

type highwayServiceDownloadBlobServer struct {
	grpc.ServerStream
}

func (x *highwayServiceDownloadBlobServer) Send(m *DownloadBlobResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HighwayService_SyncBlob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncBlobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HighwayServiceServer).SyncBlob(m, &highwayServiceSyncBlobServer{stream})
}

type HighwayService_SyncBlobServer interface {
	Send(*SyncBlobResponse) error
	grpc.ServerStream
}

type highwayServiceSyncBlobServer struct {
	grpc.ServerStream
}

func (x *highwayServiceSyncBlobServer) Send(m *SyncBlobResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HighwayService_DeleteBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).DeleteBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/highway.v1.HighwayService/DeleteBlob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).DeleteBlob(ctx, req.(*DeleteBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_ParseDid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseDidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).ParseDid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/highway.v1.HighwayService/ParseDid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).ParseDid(ctx, req.(*ParseDidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_ResolveDid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveDidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).ResolveDid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/highway.v1.HighwayService/ResolveDid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).ResolveDid(ctx, req.(*ResolveDidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HighwayService_ServiceDesc is the grpc.ServiceDesc for HighwayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HighwayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "highway.v1.HighwayService",
	HandlerType: (*HighwayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccessName",
			Handler:    _HighwayService_AccessName_Handler,
		},
		{
			MethodName: "RegisterName",
			Handler:    _HighwayService_RegisterName_Handler,
		},
		{
			MethodName: "UpdateName",
			Handler:    _HighwayService_UpdateName_Handler,
		},
		{
			MethodName: "AccessService",
			Handler:    _HighwayService_AccessService_Handler,
		},
		{
			MethodName: "RegisterService",
			Handler:    _HighwayService_RegisterService_Handler,
		},
		{
			MethodName: "UpdateService",
			Handler:    _HighwayService_UpdateService_Handler,
		},
		{
			MethodName: "CreateChannel",
			Handler:    _HighwayService_CreateChannel_Handler,
		},
		{
			MethodName: "ReadChannel",
			Handler:    _HighwayService_ReadChannel_Handler,
		},
		{
			MethodName: "UpdateChannel",
			Handler:    _HighwayService_UpdateChannel_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _HighwayService_DeleteChannel_Handler,
		},
		{
			MethodName: "CreateBucket",
			Handler:    _HighwayService_CreateBucket_Handler,
		},
		{
			MethodName: "ReadBucket",
			Handler:    _HighwayService_ReadBucket_Handler,
		},
		{
			MethodName: "UpdateBucket",
			Handler:    _HighwayService_UpdateBucket_Handler,
		},
		{
			MethodName: "DeleteBucket",
			Handler:    _HighwayService_DeleteBucket_Handler,
		},
		{
			MethodName: "CreateObject",
			Handler:    _HighwayService_CreateObject_Handler,
		},
		{
			MethodName: "ReadObject",
			Handler:    _HighwayService_ReadObject_Handler,
		},
		{
			MethodName: "UpdateObject",
			Handler:    _HighwayService_UpdateObject_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _HighwayService_DeleteObject_Handler,
		},
		{
			MethodName: "DeleteBlob",
			Handler:    _HighwayService_DeleteBlob_Handler,
		},
		{
			MethodName: "ParseDid",
			Handler:    _HighwayService_ParseDid_Handler,
		},
		{
			MethodName: "ResolveDid",
			Handler:    _HighwayService_ResolveDid_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenChannel",
			Handler:       _HighwayService_ListenChannel_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListenBucket",
			Handler:       _HighwayService_ListenBucket_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadBlob",
			Handler:       _HighwayService_UploadBlob_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadBlob",
			Handler:       _HighwayService_DownloadBlob_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SyncBlob",
			Handler:       _HighwayService_SyncBlob_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/highway.proto",
}
